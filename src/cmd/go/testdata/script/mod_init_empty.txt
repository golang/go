env GO111MODULE=on

env GOPATH=$WORK${/}invalid-gopath

go list -m
stdout '^example.com$'

go list
stdout '^example.com$'

# Reset $GOPATH
env GOPATH=$WORK/gopath

# 'go mod init' should not create a go.mod file in v0 or v1 directory.
cd $GOPATH/src/example.com/m/v0
! go mod init
stderr '(?s)^go: invalid module path "example.com/m/v0" inferred from directory in GOPATH: major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/m/v2(.*)'

cd $GOPATH/src/example.com/m/v1
! go mod init
stderr '(?s)^go: invalid module path "example.com/m/v1" inferred from directory in GOPATH: major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)go mod init example.com/m/v2(.*)'

cd $GOPATH/src/example.com/m/v2
go mod init
stderr '^go: creating new go.mod: module example.com/m/v2$'

cd $GOPATH/src/gopkg.in/m
! go mod init
stderr '(?s)^go: invalid module path "gopkg.in/m" inferred from directory in GOPATH: module paths beginning with gopkg.in/ must always have a major version suffix in the form of .vN(.*)'

-- go.mod --
module example.com

go 1.13
-- main.go --
package main

func main() {}

-- $WORK/invalid-gopath
This is a text file, not a directory.

-- example.com/m/v0/main.go --
package main
-- example.com/m/v1/main.go --
package main
-- example.com/m/v2/main.go --
package main
-- gopkg.in/m/main.go --
package main
