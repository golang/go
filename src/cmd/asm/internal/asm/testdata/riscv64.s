// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

#include "../../../../../runtime/textflag.h"

TEXT asmtest(SB),DUPOK|NOSPLIT,$0
start:
	//
	// Unprivileged ISA
	//

	// 2.4: Integer Computational Instructions

	ADDI	$2047, X5				// 9382f27f
	ADDI	$-2048, X5				// 93820280
	ADDI	$2048, X5				// 9382024093820240
	ADDI	$-2049, X5				// 938202c09382f2bf
	ADDI	$4094, X5				// 9382f27f9382f27f
	ADDI	$-4096, X5				// 9382028093820280
	ADDI	$4095, X5				// b71f00009b8fffffb382f201
	ADDI	$-4097, X5				// b7ffffff9b8fffffb382f201
	ADDI	$2047, X5, X6				// 1383f27f
	ADDI	$-2048, X5, X6				// 13830280
	ADDI	$2048, X5, X6				// 1383024013030340
	ADDI	$-2049, X5, X6				// 138302c01303f3bf
	ADDI	$4094, X5, X6				// 1383f27f1303f37f
	ADDI	$-4096, X5, X6				// 1383028013030380
	ADDI	$4095, X5, X6				// b71f00009b8fffff3383f201
	ADDI	$-4097, X5, X6				// b7ffffff9b8fffff3383f201

	SLTI	$55, X5, X7				// 93a37203
	SLTIU	$55, X5, X7				// 93b37203

	ANDI	$1, X5, X6				// 13f31200
	ANDI	$1, X5					// 93f21200
	ANDI	$2048, X5				// b71f00009b8f0f80b3f2f201
	ORI	$1, X5, X6				// 13e31200
	ORI	$1, X5					// 93e21200
	ORI	$2048, X5				// b71f00009b8f0f80b3e2f201
	XORI	$1, X5, X6				// 13c31200
	XORI	$1, X5					// 93c21200
	XORI	$2048, X5				// b71f00009b8f0f80b3c2f201

	SLLI	$1, X5, X6				// 13931200
	SLLI	$1, X5					// 93921200
	SRLI	$1, X5, X6				// 13d31200
	SRLI	$1, X5					// 93d21200
	SRAI	$1, X5, X6				// 13d31240
	SRAI	$1, X5					// 93d21240

	ADD	X6, X5, X7				// b3836200
	ADD	X5, X6					// 33035300
	ADD	$2047, X5, X6				// 1383f27f
	ADD	$-2048, X5, X6				// 13830280
	ADD	$2047, X5				// 9382f27f
	ADD	$-2048, X5				// 93820280

	SLT	X6, X5, X7				// b3a36200
	SLT	$55, X5, X7				// 93a37203
	SLTU	X6, X5, X7				// b3b36200
	SLTU	$55, X5, X7				// 93b37203

	AND	X6, X5, X7				// b3f36200
	AND	X5, X6					// 33735300
	AND	$1, X5, X6				// 13f31200
	AND	$1, X5					// 93f21200
	OR	X6, X5, X7				// b3e36200
	OR	X5, X6					// 33635300
	OR	$1, X5, X6				// 13e31200
	OR	$1, X5					// 93e21200
	XOR	X6, X5, X7				// b3c36200
	XOR	X5, X6					// 33435300
	XOR	$1, X5, X6				// 13c31200
	XOR	$1, X5					// 93c21200

	AUIPC	$0, X10					// 17050000
	AUIPC	$0, X11					// 97050000
	AUIPC	$1, X10					// 17150000
	AUIPC	$-524288, X15				// 97070080
	AUIPC	$524287, X10				// 17f5ff7f

	LUI	$0, X15					// b7070000
	LUI	$167, X15				// b7770a00
	LUI	$-524288, X15				// b7070080
	LUI	$524287, X15				// b7f7ff7f

	SLL	X6, X5, X7				// b3936200
	SLL	X5, X6					// 33135300
	SLL	$1, X5, X6				// 13931200
	SLL	$1, X5					// 93921200
	SRL	X6, X5, X7				// b3d36200
	SRL	X5, X6					// 33535300
	SRL	$1, X5, X6				// 13d31200
	SRL	$1, X5					// 93d21200

	SUB	X6, X5, X7				// b3836240
	SUB	X5, X6					// 33035340
	SUB	$-2047, X5, X6				// 1383f27f
	SUB	$2048, X5, X6				// 13830280
	SUB	$-2047, X5				// 9382f27f
	SUB	$2048, X5				// 93820280

	SRA	X6, X5, X7				// b3d36240
	SRA	X5, X6					// 33535340
	SRA	$1, X5, X6				// 13d31240
	SRA	$1, X5					// 93d21240

	// 2.5: Control Transfer Instructions
	JAL	X5, 2(PC)				// ef028000
	JALR	X6, (X5)				// 67830200
	JALR	X6, 4(X5)				// 67834200
	BEQ	X5, X6, 2(PC)				// 63846200
	BNE	X5, X6, 2(PC)				// 63946200
	BLT	X5, X6, 2(PC)				// 63c46200
	BLTU	X5, X6, 2(PC)				// 63e46200
	BGE	X5, X6, 2(PC)				// 63d46200
	BGEU	X5, X6, 2(PC)				// 63f46200

	// 2.6: Load and Store Instructions
	LW	(X5), X6				// 03a30200
	LW	4(X5), X6				// 03a34200
	LWU	(X5), X6				// 03e30200
	LWU	4(X5), X6				// 03e34200
	LH	(X5), X6				// 03930200
	LH	4(X5), X6				// 03934200
	LHU	(X5), X6				// 03d30200
	LHU	4(X5), X6				// 03d34200
	LB	(X5), X6				// 03830200
	LB	4(X5), X6				// 03834200
	LBU	(X5), X6				// 03c30200
	LBU	4(X5), X6				// 03c34200

	SW	X5, (X6)				// 23205300
	SW	X5, 4(X6)				// 23225300
	SH	X5, (X6)				// 23105300
	SH	X5, 4(X6)				// 23125300
	SB	X5, (X6)				// 23005300
	SB	X5, 4(X6)				// 23025300

	// 2.7: Memory Ordering Instructions
	FENCE						// 0f00f00f

	// 4.2: Integer Computational Instructions (RV64I)
	ADDIW	$1, X5, X6				// 1b831200
	SLLIW	$1, X5, X6				// 1b931200
	SRLIW	$1, X5, X6				// 1bd31200
	SRAIW	$1, X5, X6				// 1bd31240
	ADDW	X5, X6, X7				// bb035300
	SLLW	X5, X6, X7				// bb135300
	SRLW	X5, X6, X7				// bb535300
	SUBW	X5, X6, X7				// bb035340
	SRAW	X5, X6, X7				// bb535340
	ADDIW	$1, X6					// 1b031300
	SLLIW	$1, X6					// 1b131300
	SRLIW	$1, X6					// 1b531300
	SRAIW	$1, X6					// 1b531340
	ADDW	X5, X7					// bb835300
	SLLW	X5, X7					// bb935300
	SRLW	X5, X7					// bbd35300
	SUBW	X5, X7					// bb835340
	SRAW	X5, X7					// bbd35340
	ADDW	$1, X6					// 1b031300
	SLLW	$1, X6					// 1b131300
	SRLW	$1, X6					// 1b531300
	SUBW	$1, X6					// 1b03f3ff
	SRAW	$1, X6					// 1b531340

	// 4.3: Load and Store Instructions (RV64I)
	LD	(X5), X6				// 03b30200
	LD	4(X5), X6				// 03b34200
	SD	X5, (X6)				// 23305300
	SD	X5, 4(X6)				// 23325300

	// 8.1: Base Counters and Timers (Zicntr)
	RDCYCLE		X5				// f32200c0
	RDTIME		X5				// f32210c0
	RDINSTRET	X5				// f32220c0

	// 13.1: Multiplication Operations
	MUL	X5, X6, X7				// b3035302
	MULH	X5, X6, X7				// b3135302
	MULHU	X5, X6, X7				// b3335302
	MULHSU	X5, X6, X7				// b3235302
	MULW	X5, X6, X7				// bb035302

	// 13.2: Division Operations
	DIV	X5, X6, X7				// b3435302
	DIVU	X5, X6, X7				// b3535302
	REM	X5, X6, X7				// b3635302
	REMU	X5, X6, X7				// b3735302
	DIVW	X5, X6, X7				// bb435302
	DIVUW	X5, X6, X7				// bb535302
	REMW	X5, X6, X7				// bb635302
	REMUW	X5, X6, X7				// bb735302

	// 14.2: Load-Reserved/Store-Conditional (Zalrsc)
	LRW	(X5), X6				// 2fa30214
	LRD	(X5), X6				// 2fb30214
	SCW	X5, (X6), X7				// af23531a
	SCD	X5, (X6), X7				// af33531a

	// 14.4: Atomic Memory Operations (Zaamo)
	AMOSWAPW	X5, (X6), X7			// af23530e
	AMOSWAPD	X5, (X6), X7			// af33530e
	AMOADDW		X5, (X6), X7			// af235306
	AMOADDD		X5, (X6), X7			// af335306
	AMOANDW		X5, (X6), X7			// af235366
	AMOANDD		X5, (X6), X7			// af335366
	AMOORW		X5, (X6), X7			// af235346
	AMOORD		X5, (X6), X7			// af335346
	AMOXORW		X5, (X6), X7			// af235326
	AMOXORD		X5, (X6), X7			// af335326
	AMOMAXW		X5, (X6), X7			// af2353a6
	AMOMAXD		X5, (X6), X7			// af3353a6
	AMOMAXUW	X5, (X6), X7			// af2353e6
	AMOMAXUD	X5, (X6), X7			// af3353e6
	AMOMINW		X5, (X6), X7			// af235386
	AMOMIND		X5, (X6), X7			// af335386
	AMOMINUW	X5, (X6), X7			// af2353c6
	AMOMINUD	X5, (X6), X7			// af3353c6

	// 20.5: Single-Precision Load and Store Instructions
	FLW	(X5), F0				// 07a00200
	FLW	4(X5), F0				// 07a04200
	FSW	F0, (X5)				// 27a00200
	FSW	F0, 4(X5)				// 27a20200

	// 20.6: Single-Precision Floating-Point Computational Instructions
	FADDS	F1, F0, F2				// 53011000
	FSUBS	F1, F0, F2				// 53011008
	FMULS	F1, F0, F2				// 53011010
	FDIVS	F1, F0, F2				// 53011018
	FMINS	F1, F0, F2				// 53011028
	FMAXS	F1, F0, F2				// 53111028
	FSQRTS	F0, F1					// d3000058

	// 20.7: Single-Precision Floating-Point Conversion and Move Instructions
	FCVTWS	F0, X5					// d31200c0
	FCVTWS.RNE	F0, X5				// d30200c0
	FCVTWS.RTZ	F0, X5				// d31200c0
	FCVTWS.RDN	F0, X5				// d32200c0
	FCVTWS.RUP	F0, X5				// d33200c0
	FCVTWS.RMM	F0, X5				// d34200c0
	FCVTLS	F0, X5					// d31220c0
	FCVTLS.RNE	F0, X5				// d30220c0
	FCVTLS.RTZ	F0, X5				// d31220c0
	FCVTLS.RDN	F0, X5				// d32220c0
	FCVTLS.RUP	F0, X5				// d33220c0
	FCVTLS.RMM	F0, X5				// d34220c0
	FCVTSW	X5, F0					// 538002d0
	FCVTSL	X5, F0					// 538022d0
	FCVTWUS	F0, X5					// d31210c0
	FCVTWUS.RNE	F0, X5				// d30210c0
	FCVTWUS.RTZ	F0, X5				// d31210c0
	FCVTWUS.RDN	F0, X5				// d32210c0
	FCVTWUS.RUP	F0, X5				// d33210c0
	FCVTWUS.RMM	F0, X5				// d34210c0
	FCVTLUS	F0, X5					// d31230c0
	FCVTLUS.RNE	F0, X5				// d30230c0
	FCVTLUS.RTZ	F0, X5				// d31230c0
	FCVTLUS.RDN	F0, X5				// d32230c0
	FCVTLUS.RUP	F0, X5				// d33230c0
	FCVTLUS.RMM	F0, X5				// d34230c0
	FCVTSWU	X5, F0					// 538012d0
	FCVTSLU	X5, F0					// 538032d0
	FSGNJS	F1, F0, F2				// 53011020
	FSGNJNS	F1, F0, F2				// 53111020
	FSGNJXS	F1, F0, F2				// 53211020
	FMVXS	F0, X5					// d30200e0
	FMVSX	X5, F0					// 538002f0
	FMVXW	F0, X5					// d30200e0
	FMVWX	X5, F0					// 538002f0
	FMADDS	F1, F2, F3, F4				// 43822018
	FMSUBS	F1, F2, F3, F4				// 47822018
	FNMSUBS	F1, F2, F3, F4				// 4b822018
	FNMADDS	F1, F2, F3, F4				// 4f822018

	// 20.8: Single-Precision Floating-Point Compare Instructions
	FEQS	F0, F1, X7				// d3a300a0
	FLTS	F0, F1, X7				// d39300a0
	FLES	F0, F1, X7				// d38300a0

	// 20.9: Single-Precision Floating-Point Classify Instruction
	FCLASSS	F0, X5					// d31200e0

	// 21.3: Double-Precision Load and Store Instructions
	FLD	(X5), F0				// 07b00200
	FLD	4(X5), F0				// 07b04200
	FSD	F0, (X5)				// 27b00200
	FSD	F0, 4(X5)				// 27b20200

	// 21.4: Double-Precision Floating-Point Computational Instructions
	FADDD	F1, F0, F2				// 53011002
	FSUBD	F1, F0, F2				// 5301100a
	FMULD	F1, F0, F2				// 53011012
	FDIVD	F1, F0, F2				// 5301101a
	FMIND	F1, F0, F2				// 5301102a
	FMAXD	F1, F0, F2				// 5311102a
	FSQRTD	F0, F1					// d300005a

	// 21.5: Double-Precision Floating-Point Conversion and Move Instructions
	FCVTWD	F0, X5					// d31200c2
	FCVTWD.RNE	F0, X5				// d30200c2
	FCVTWD.RTZ	F0, X5				// d31200c2
	FCVTWD.RDN	F0, X5				// d32200c2
	FCVTWD.RUP	F0, X5				// d33200c2
	FCVTWD.RMM	F0, X5				// d34200c2
	FCVTLD	F0, X5					// d31220c2
	FCVTLD.RNE	F0, X5				// d30220c2
	FCVTLD.RTZ	F0, X5				// d31220c2
	FCVTLD.RDN	F0, X5				// d32220c2
	FCVTLD.RUP	F0, X5				// d33220c2
	FCVTLD.RMM	F0, X5				// d34220c2
	FCVTDW	X5, F0					// 538002d2
	FCVTDL	X5, F0					// 538022d2
	FCVTWUD F0, X5					// d31210c2
	FCVTWUD.RNE F0, X5				// d30210c2
	FCVTWUD.RTZ F0, X5				// d31210c2
	FCVTWUD.RDN F0, X5				// d32210c2
	FCVTWUD.RUP F0, X5				// d33210c2
	FCVTWUD.RMM F0, X5				// d34210c2
	FCVTLUD F0, X5					// d31230c2
	FCVTLUD.RNE F0, X5				// d30230c2
	FCVTLUD.RTZ F0, X5				// d31230c2
	FCVTLUD.RDN F0, X5				// d32230c2
	FCVTLUD.RUP F0, X5				// d33230c2
	FCVTLUD.RMM F0, X5				// d34230c2
	FCVTDWU X5, F0					// 538012d2
	FCVTDLU X5, F0					// 538032d2
	FCVTSD	F0, F1					// d3001040
	FCVTDS	F0, F1					// d3000042
	FSGNJD	F1, F0, F2				// 53011022
	FSGNJND	F1, F0, F2				// 53111022
	FSGNJXD	F1, F0, F2				// 53211022
	FMVXD	F0, X5					// d30200e2
	FMVDX	X5, F0					// 538002f2
	FMADDD	F1, F2, F3, F4				// 4382201a
	FMSUBD	F1, F2, F3, F4				// 4782201a
	FNMSUBD	F1, F2, F3, F4				// 4b82201a
	FNMADDD	F1, F2, F3, F4				// 4f82201a

	// 21.7: Double-Precision Floating-Point Classify Instruction
	FCLASSD	F0, X5					// d31200e2

	// 28.4.1: Address Generation Instructions (Zba)
	ADDUW		X10, X11, X12			// 3b86a508
	ADDUW		X10, X11			// bb85a508
	SH1ADD		X11, X12, X13			// b326b620
	SH1ADD		X11, X12			// 3326b620
	SH1ADDUW	X12, X13, X14			// 3ba7c620
	SH1ADDUW	X12, X13			// bba6c620
	SH2ADD		X13, X14, X15			// b347d720
	SH2ADD		X13, X14			// 3347d720
	SH2ADDUW	X14, X15, X16			// 3bc8e720
	SH2ADDUW	X14, X15			// bbc7e720
	SH3ADD		X15, X16, X17			// b368f820
	SH3ADD		X15, X16			// 3368f820
	SH3ADDUW	X16, X17, X18			// 3be90821
	SH3ADDUW	X16, X17			// bbe80821
	SLLIUW		$31, X17, X18			// 1b99f809
	SLLIUW		$63, X17			// 9b98f80b
	SLLIUW		$63, X17, X18			// 1b99f80b
	SLLIUW		$1, X18, X19			// 9b191908

	//
	// "B" Extension for Bit Manipulation, Version 1.0.0
	//

	// 28.4.2: Basic Bit Manipulation (Zbb)
	ANDN	X19, X20, X21				// b37a3a41 or 93caf9ffb37a5a01
	ANDN	X19, X20				// 337a3a41 or 93cff9ff337afa01
	CLZ	X20, X21				// 931a0a60
	CLZW	X21, X22				// 1b9b0a60
	CPOP	X22, X23				// 931b2b60
	CPOPW	X23, X24				// 1b9c2b60
	CTZ	X24, X25				// 931c1c60
	CTZW	X25, X26				// 1b9d1c60
	MAX	X26, X28, X29				// b36eae0b or b32fae01b30ff041b34eae01b3fedf01b34ede01
	MAX	X26, X28				// 336eae0b or b32fcd01b30ff041334ecd0133fecf01334ecd01
	MAXU	X28, X29, X30				// 33ffce0b or b3bfce01b30ff04133cfce0133ffef0133cfee01
	MAXU	X28, X29				// b3fece0b or b33fde01b30ff041b34ede01b3fedf01b34ede01
	MIN	X29, X30, X5				// b342df0b or b3afee01b30ff041b342df01b3f25f00b3425f00
	MIN	X29, X30				// 334fdf0b or b32fdf01b30ff04133cfee0133ffef0133cfee01
	MINU	X30, X5, X6				// 33d3e20b or b33f5f00b30ff04133c3e20133f36f0033c36200
	MINU	X30, X5					// b3d2e20b or b3bfe201b30ff041b3425f00b3f25f00b3425f00
	ORN	X6, X7, X8				// 33e46340 or 1344f3ff33e48300
	ORN	X6, X7					// b3e36340 or 934ff3ffb3e3f301
	SEXTB	X16, X17				// 93184860
	SEXTH	X17, X18				// 13995860
	XNOR	X18, X19, X20				// 33ca2941 or 33ca2901134afaff
	XNOR	X18, X19				// b3c92941 or b3c9290193c9f9ff
	ZEXTH	X19, X20				// 3bca0908

	// 28.4.2: Bitwise Rotation (Zbb)
	ROL	X8, X9, X10				// 33958460 or b30f8040b3dff4013395840033e5af00
	ROL	X8, X9					// b3948460 or b30f8040b3dff401b3948400b3e49f00
	ROLW	X9, X10, X11				// bb159560 or b30f9040bb5ff501bb159500b3e5bf00
	ROLW	X9, X10					// 3b159560 or b30f9040bb5ff5013b15950033e5af00
	ROR	X10, X11, X12				// 33d6a560 or b30fa040b39ff50133d6a50033e6cf00
	ROR	X10, X11				// b3d5a560 or b30fa040b39ff501b3d5a500b3e5bf00
	ROR	$63, X11				// 93d5f563 or 93dff50393951500b3e5bf00
	RORI	$63, X11, X12				// 13d6f563 or 93dff5031396150033e6cf00
	RORI	$1, X12, X13				// 93561660 or 935f16009316f603b3e6df00
	RORIW	$31, X13, X14				// 1bd7f661 or 9bdff6011b97160033e7ef00
	RORIW	$1, X14, X15				// 9b571760 or 9b5f17009b17f701b3e7ff00
	RORW	X15, X16, X17				// bb58f860 or b30ff040bb1ff801bb58f800b3e81f01
	RORW	X15, X16				// 3b58f860 or b30ff040bb1ff8013b58f80033e80f01
	RORW	$31, X13				// 9bd6f661 or 9bdff6019b961600b3e6df00
	ORCB	X5, X6					// 13d37228
	REV8	X7, X8					// 13d4836b

	// 28.4.4: Single-bit Instructions (Zbs)
	BCLR	X23, X24, X25				// b31c7c49
	BCLR	$63, X24				// 131cfc4b
	BCLRI	$1, X25, X26				// 139d1c48
	BEXT	X26, X28, X29				// b35eae49
	BEXT	$63, X28				// 135efe4b
	BEXTI	$1, X29, X30				// 13df1e48
	BINV	X30, X5, X6				// 3393e269
	BINV	$63, X6					// 1313f36b
	BINVI	$1, X7, X8				// 13941368
	BSET	X8, X9, X10				// 33958428
	BSET	$63, X9					// 9394f42b
	BSETI	$1, X10, X11				// 93151528

	//
	// "V" Standard Extension for Vector Operations, Version 1.0
	//

	// 31.6: Configuration Setting Instructions
	VSETVLI	X10, E8, M1, TU, MU, X12		// 57760500
	VSETVLI	X10, E16, M1, TU, MU, X12		// 57768500
	VSETVLI	X10, E32, M1, TU, MU, X12		// 57760501
	VSETVLI	X10, E64, M1, TU, MU, X12		// 57768501
	VSETVLI	X10, E32, M1, TU, MA, X12		// 57760509
	VSETVLI	X10, E32, M1, TA, MA, X12		// 5776050d
	VSETVLI	X10, E32, M2, TA, MA, X12		// 5776150d
	VSETVLI	X10, E32, M4, TA, MA, X12		// 5776250d
	VSETVLI	X10, E32, M8, TA, MA, X12		// 5776350d
	VSETVLI	X10, E32, MF2, TA, MA, X12		// 5776550d
	VSETVLI	X10, E32, MF4, TA, MA, X12		// 5776650d
	VSETVLI	X10, E32, MF8, TA, MA, X12		// 5776750d
	VSETVLI	X10, E32, M1, TA, MA, X12		// 5776050d
	VSETVLI	$15, E32, M1, TA, MA, X12		// 57f607cd
	VSETIVLI $0, E32, M1, TA, MA, X12		// 577600cd
	VSETIVLI $15, E32, M1, TA, MA, X12		// 57f607cd
	VSETIVLI $31, E32, M1, TA, MA, X12		// 57f60fcd
	VSETVL	X10, X11, X12				// 57f6a580

	// 31.7.4: Vector Unit-Stride Instructions
	VLE8V		(X10), V3			// 87010502
	VLE8V		(X10), V0, V3			// 87010500
	VLE16V		(X10), V3			// 87510502
	VLE16V		(X10), V0, V3			// 87510500
	VLE32V		(X10), V3			// 87610502
	VLE32V		(X10), V0, V3			// 87610500
	VLE64V		(X10), V3			// 87710502
	VLE64V		(X10), V0, V3			// 87710500
	VSE8V		V3, (X10)			// a7010502
	VSE8V		V3, V0, (X10)			// a7010500
	VSE16V		V3, (X10)			// a7510502
	VSE16V		V3, V0, (X10)			// a7510500
	VSE32V		V3, (X10)			// a7610502
	VSE32V		V3, V0, (X10)			// a7610500
	VSE64V		V3, (X10)			// a7710502
	VSE64V		V3, V0, (X10)			// a7710500
	VLMV		(X10), V3			// 8701b502
	VSMV		V3, (X10)			// a701b502

	// 31.7.5: Vector Strided Instructions
	VLSE8V		(X10), X11, V3			// 8701b50a
	VLSE8V		(X10), X11, V0, V3		// 8701b508
	VLSE16V		(X10), X11, V3			// 8751b50a
	VLSE16V		(X10), X11, V0, V3		// 8751b508
	VLSE32V		(X10), X11, V3			// 8761b50a
	VLSE32V		(X10), X11, V0, V3		// 8761b508
	VLSE64V		(X10), X11, V3			// 8771b50a
	VLSE64V		(X10), X11, V0, V3		// 8771b508
	VSSE8V		V3, X11, (X10)			// a701b50a
	VSSE8V		V3, X11, V0, (X10)		// a701b508
	VSSE16V		V3, X11, (X10)			// a751b50a
	VSSE16V		V3, X11, V0, (X10)		// a751b508
	VSSE32V		V3, X11, (X10)			// a761b50a
	VSSE32V		V3, X11, V0, (X10)		// a761b508
	VSSE64V		V3, X11, (X10)			// a771b50a
	VSSE64V		V3, X11, V0, (X10)		// a771b508

	// 31.7.6: Vector Indexed Instructions
	VLUXEI8V	(X10), V2, V3			// 87012506
	VLUXEI8V	(X10), V2, V0, V3		// 87012504
	VLUXEI16V	(X10), V2, V3			// 87512506
	VLUXEI16V	(X10), V2, V0, V3		// 87512504
	VLUXEI32V	(X10), V2, V3			// 87612506
	VLUXEI32V	(X10), V2, V0, V3		// 87612504
	VLUXEI64V	(X10), V2, V3			// 87712506
	VLUXEI64V	(X10), V2, V0, V3		// 87712504
	VLOXEI8V	(X10), V2, V3			// 8701250e
	VLOXEI8V	(X10), V2, V0, V3		// 8701250c
	VLOXEI16V	(X10), V2, V3			// 8751250e
	VLOXEI16V	(X10), V2, V0, V3		// 8751250c
	VLOXEI32V	(X10), V2, V3			// 8761250e
	VLOXEI32V	(X10), V2, V0, V3		// 8761250c
	VLOXEI64V	(X10), V2, V3			// 8771250e
	VLOXEI64V	(X10), V2, V0, V3		// 8771250c
	VSUXEI8V	V3, V2, (X10)			// a7012506
	VSUXEI8V	V3, V2, V0, (X10)		// a7012504
	VSUXEI16V	V3, V2, (X10)			// a7512506
	VSUXEI16V	V3, V2, V0, (X10)		// a7512504
	VSUXEI32V	V3, V2, (X10)			// a7612506
	VSUXEI32V	V3, V2, V0, (X10)		// a7612504
	VSUXEI64V	V3, V2, (X10)			// a7712506
	VSUXEI64V	V3, V2, V0, (X10)		// a7712504
	VSOXEI8V	V3, V2, (X10)			// a701250e
	VSOXEI8V	V3, V2, V0, (X10)		// a701250c
	VSOXEI16V	V3, V2, (X10)			// a751250e
	VSOXEI16V	V3, V2, V0, (X10)		// a751250c
	VSOXEI32V	V3, V2, (X10)			// a761250e
	VSOXEI32V	V3, V2, V0, (X10)		// a761250c
	VSOXEI64V	V3, V2, (X10)			// a771250e
	VSOXEI64V	V3, V2, V0, (X10)		// a771250c

	// 31.7.9: Vector Load/Store Whole Register Instructions
	VL1RV		(X10), V3			// 87018502
	VL1RE8V		(X10), V3			// 87018502
	VL1RE16V	(X10), V3			// 87518502
	VL1RE32V	(X10), V3			// 87618502
	VL1RE64V	(X10), V3			// 87718502
	VL2RV		(X10), V2			// 07018522
	VL2RE8V		(X10), V2			// 07018522
	VL2RE16V	(X10), V2			// 07518522
	VL2RE32V	(X10), V2			// 07618522
	VL2RE64V	(X10), V2			// 07718522
	VL4RV		(X10), V4			// 07028562
	VL4RE8V		(X10), V4			// 07028562
	VL4RE16V	(X10), V4			// 07528562
	VL4RE32V	(X10), V4			// 07628562
	VL4RE64V	(X10), V4			// 07728562
	VL8RV		(X10), V8			// 070485e2
	VL8RE8V		(X10), V8			// 070485e2
	VL8RE16V	(X10), V8			// 075485e2
	VL8RE32V	(X10), V8			// 076485e2
	VL8RE64V	(X10), V8			// 077485e2
	VS1RV		V3, (X11)			// a7818502
	VS2RV		V2, (X11)			// 27818522
	VS4RV		V4, (X11)			// 27828562
	VS8RV		V8, (X11)			// 278485e2

	// 31.11.1: Vector Single-Width Integer Add and Subtract
	VADDVV		V1, V2, V3			// d7812002
	VADDVV		V1, V2, V0, V3			// d7812000
	VADDVX		X10, V2, V3			// d7412502
	VADDVX		X10, V2, V0, V3			// d7412500
	VADDVI		$15, V2, V3			// d7b12702
	VADDVI		$15, V2, V0, V3			// d7b12700
	VADDVI		$-16, V2, V3			// d7312802
	VADDVI		$-16, V2, V0, V3		// d7312800
	VSUBVV		V1, V2, V3			// d781200a
	VSUBVV		V1, V2, V0, V3			// d7812008
	VSUBVX		X10, V2, V3			// d741250a
	VSUBVX		X10, V2, V0, V3			// d7412508
	VRSUBVX		X10, V2, V3			// d741250e
	VRSUBVX		X10, V2, V0, V3			// d741250c
	VRSUBVI		$15, V2, V0, V3			// d7b1270c
	VRSUBVI		$-16, V2, V0, V3		// d731280c
	VNEGV		V2, V3				// d741200e
	VNEGV		V2, V0, V3			// d741200c

	// 31.11.2: Vector Widening Integer Add/Subtract
	VWADDUVV	V1, V2, V3			// d7a120c2
	VWADDUVV	V1, V2, V0, V3			// d7a120c0
	VWADDUVX	X10, V2, V3			// d76125c2
	VWADDUVX	X10, V2, V0, V3			// d76125c0
	VWSUBUVV	V1, V2, V3			// d7a120ca
	VWSUBUVV	V1, V2, V0, V3			// d7a120c8
	VWSUBUVX	X10, V2, V3			// d76125ca
	VWSUBUVX	X10, V2, V0, V3			// d76125c8
	VWADDVV		V1, V2, V3			// d7a120c6
	VWADDVV		V1, V2, V0, V3			// d7a120c4
	VWADDVX		X10, V2, V3			// d76125c6
	VWADDVX		X10, V2, V0, V3			// d76125c4
	VWSUBVV		V1, V2, V3			// d7a120ce
	VWSUBVV		V1, V2, V0, V3			// d7a120cc
	VWSUBVX		X10, V2, V3			// d76125ce
	VWSUBVX		X10, V2, V0, V3			// d76125cc
	VWADDUWV	V1, V2, V3			// d7a120d2
	VWADDUWV	V1, V2, V0, V3			// d7a120d0
	VWADDUWX	X10, V2, V3			// d76125d2
	VWADDUWX	X10, V2, V0, V3			// d76125d0
	VWSUBUWV	V1, V2, V3			// d7a120da
	VWSUBUWV	V1, V2, V0, V3			// d7a120d8
	VWSUBUWX	X10, V2, V3			// d76125da
	VWSUBUWX	X10, V2, V0, V3			// d76125d8
	VWADDWV		V1, V2, V3			// d7a120d6
	VWADDWV		V1, V2, V0, V3			// d7a120d4
	VWADDWX		X10, V2, V3			// d76125d6
	VWADDWX		X10, V2, V0, V3			// d76125d4
	VWSUBWV		V1, V2, V3			// d7a120de
	VWSUBWV		V1, V2, V0, V3			// d7a120dc
	VWSUBWX		X10, V2, V3			// d76125de
	VWSUBWX		X10, V2, V0, V3			// d76125dc
	VWCVTXXV	V2, V3				// d76120c6
	VWCVTXXV	V2, V0, V3			// d76120c4
	VWCVTUXXV	V2, V3				// d76120c2
	VWCVTUXXV	V2, V0, V3			// d76120c0

	// 31.11.3: Vector Integer Extension
	VZEXTVF2	V2, V3				// d721234a
	VZEXTVF2	V2, V0, V3			// d7212348
	VSEXTVF2	V2, V3				// d7a1234a
	VSEXTVF2	V2, V0, V3			// d7a12348
	VZEXTVF4	V2, V3				// d721224a
	VZEXTVF4	V2, V0, V3			// d7212248
	VSEXTVF4	V2, V3				// d7a1224a
	VSEXTVF4	V2, V0, V3			// d7a12248
	VZEXTVF8	V2, V3				// d721214a
	VZEXTVF8	V2, V0, V3			// d7212148
	VSEXTVF8	V2, V3				// d7a1214a
	VSEXTVF8	V2, V0, V3			// d7a12148

	// 31.11.4: Vector Integer Add-with-Carry / Subtract-with-Borrow Instructions
	VADCVVM		V1, V2, V0, V3			// d7812040
	VADCVXM		X11, V2, V0, V3			// d7c12540
	VADCVIM		$15, V2, V0, V3			// d7b12740
	VMADCVVM	V1, V2, V0, V3			// d7812044
	VMADCVXM	X11, V2, V0, V3			// d7c12544
	VMADCVIM	$15, V2, V0, V3			// d7b12744
	VMADCVV		V1, V2, V3			// d7812046
	VMADCVX		X11, V2, V3			// d7c12546
	VMADCVI		$15, V2, V3			// d7b12746
	VSBCVVM		V1, V2, V0, V3			// d7812048
	VSBCVXM		X11, V2, V0, V3			// d7c12548
	VMSBCVVM	V1, V2, V0, V3			// d781204c
	VMSBCVXM	X11, V2, V0, V3			// d7c1254c
	VMSBCVV		V1, V2, V3			// d781204e
	VMSBCVX		X11, V2, V3			// d7c1254e

	// 31.11.5: Vector Bitwise Logical Instructions
	VANDVV		V1, V2, V3			// d7812026
	VANDVV		V1, V2, V0, V3			// d7812024
	VANDVX		X11, V2, V3			// d7c12526
	VANDVX		X11, V2, V0, V3			// d7c12524
	VANDVI		$15, V2, V3			// d7b12726
	VANDVI		$15, V2, V0, V3			// d7b12724
	VORVV		V1, V2, V3			// d781202a
	VORVV		V1, V2, V0, V3			// d7812028
	VORVX		X11, V2, V3			// d7c1252a
	VORVX		X11, V2, V0, V3			// d7c12528
	VORVI		$15, V2, V3			// d7b1272a
	VORVI		$15, V2, V0, V3			// d7b12728
	VXORVV		V1, V2, V3			// d781202e
	VXORVV		V1, V2, V0, V3			// d781202c
	VXORVX		X11, V2, V3			// d7c1252e
	VXORVX		X11, V2, V0, V3			// d7c1252c
	VXORVI		$15, V2, V3			// d7b1272e
	VXORVI		$15, V2, V0, V3			// d7b1272c
	VNOTV		V2, V3				// d7b12f2e
	VNOTV		V2, V0, V3			// d7b12f2c

	// 31.11.6: Vector Single-Width Shift Instructions
	VSLLVV		V1, V2, V3			// d7812096
	VSLLVV		V1, V2, V0, V3			// d7812094
	VSLLVX		X11, V2, V3			// d7c12596
	VSLLVX		X11, V2, V0, V3			// d7c12594
	VSLLVI		$15, V2, V3			// d7b12796
	VSLLVI		$15, V2, V0, V3			// d7b12794
	VSRLVV		V1, V2, V3			// d78120a2
	VSRLVV		V1, V2, V0, V3			// d78120a0
	VSRLVX		X11, V2, V3			// d7c125a2
	VSRLVX		X11, V2, V0, V3			// d7c125a0
	VSRLVI		$15, V2, V3			// d7b127a2
	VSRLVI		$15, V2, V0, V3			// d7b127a0
	VSRAVV		V1, V2, V3			// d78120a6
	VSRAVV		V1, V2, V0, V3			// d78120a4
	VSRAVX		X11, V2, V3			// d7c125a6
	VSRAVX		X11, V2, V0, V3			// d7c125a4
	VSRAVI		$15, V2, V3			// d7b127a6
	VSRAVI		$15, V2, V0, V3			// d7b127a4

	// 31.11.7: Vector Narrowing Integer Right Shift Instructions
	VNSRLWV		V1, V2, V3			// d78120b2
	VNSRLWV		V1, V2, V0, V3			// d78120b0
	VNSRLWX		X10, V2, V3			// d74125b2
	VNSRLWX		X10, V2, V0, V3			// d74125b0
	VNSRLWI		$31, V2, V3			// d7b12fb2
	VNSRLWI		$31, V2, V0, V3			// d7b12fb0
	VNSRAWV		V1, V2, V3			// d78120b6
	VNSRAWV		V1, V2, V0, V3			// d78120b4
	VNSRAWX		X10, V2, V3			// d74125b6
	VNSRAWX		X10, V2, V0, V3			// d74125b4
	VNSRAWI		$31, V2, V3			// d7b12fb6
	VNSRAWI		$31, V2, V0, V3			// d7b12fb4
	VNCVTXXW	V2, V3				// d74120b2
	VNCVTXXW	V2, V0, V3			// d74120b0

	// 31.11.8: Vector Integer Compare Instructions
	VMSEQVV		V1, V2, V3			// d7812062
	VMSEQVV		V1, V2, V0, V3			// d7812060
	VMSEQVX		X10, V2, V3			// d7412562
	VMSEQVX		X10, V2, V0, V3			// d7412560
	VMSEQVI		$15, V2, V3			// d7b12762
	VMSEQVI		$15, V2, V0, V3			// d7b12760
	VMSNEVV		V1, V2, V3			// d7812066
	VMSNEVV		V1, V2, V0, V3			// d7812064
	VMSNEVX		X10, V2, V3			// d7412566
	VMSNEVX		X10, V2, V0, V3			// d7412564
	VMSNEVI		$15, V2, V3			// d7b12766
	VMSNEVI		$15, V2, V0, V3			// d7b12764
	VMSLTUVV	V1, V2, V3			// d781206a
	VMSLTUVV	V1, V2, V0, V3			// d7812068
	VMSLTUVX	X10, V2, V3			// d741256a
	VMSLTUVX	X10, V2, V0, V3			// d7412568
	VMSLTVV		V1, V2, V3			// d781206e
	VMSLTVV		V1, V2, V0, V3			// d781206c
	VMSLTVX		X10, V2, V3			// d741256e
	VMSLTVX		X10, V2, V0, V3			// d741256c
	VMSLEUVV	V1, V2, V3			// d7812072
	VMSLEUVV	V1, V2, V0, V3			// d7812070
	VMSLEUVX	X10, V2, V3			// d7412572
	VMSLEUVX	X10, V2, V0, V3			// d7412570
	VMSLEUVI	$15, V2, V3			// d7b12772
	VMSLEUVI	$15, V2, V0, V3			// d7b12770
	VMSLEVV		V1, V2, V3			// d7812076
	VMSLEVV		V1, V2, V0, V3			// d7812074
	VMSLEVX		X10, V2, V3			// d7412576
	VMSLEVX		X10, V2, V0, V3			// d7412574
	VMSLEVI		$15, V2, V3			// d7b12776
	VMSLEVI		$15, V2, V0, V3			// d7b12774
	VMSGTUVX	X10, V2, V3			// d741257a
	VMSGTUVX	X10, V2, V0, V3			// d7412578
	VMSGTUVI	$15, V2, V3			// d7b1277a
	VMSGTUVI	$15, V2, V0, V3			// d7b12778
	VMSGTVX		X10, V2, V3			// d741257e
	VMSGTVX		X10, V2, V0, V3			// d741257c
	VMSGTVI		$15, V2, V3			// d7b1277e
	VMSGTVI		$15, V2, V0, V3			// d7b1277c
	VMSGTVV		V1, V2, V3			// d701116e
	VMSGTVV		V1, V2, V0, V3			// d701116c
	VMSGTUVV	V1, V2, V3			// d701116a
	VMSGTUVV	V1, V2, V0, V3			// d7011168
	VMSGEVV		V1, V2, V3			// d7011176
	VMSGEVV		V1, V2, V0, V3			// d7011174
	VMSGEUVV	V1, V2, V3			// d7011172
	VMSGEUVV	V1, V2, V0, V3			// d7011170
	VMSLTVI		$15, V2, V3			// d7312776
	VMSLTVI		$15, V2, V0, V3			// d7312774
	VMSLTUVI	$15, V2, V3			// d7312772
	VMSLTUVI	$15, V2, V0, V3			// d7312770
	VMSGEVI		$15, V2, V3			// d731277e
	VMSGEVI		$15, V2, V0, V3			// d731277c
	VMSGEUVI	$15, V2, V3			// d731277a
	VMSGEUVI	$15, V2, V0, V3			// d7312778

	// 31.11.9: Vector Integer Min/Max Instructions
	VMINUVV		V1, V2, V3			// d7812012
	VMINUVV		V1, V2, V0, V3			// d7812010
	VMINUVX		X10, V2, V3			// d7412512
	VMINUVX		X10, V2, V0, V3			// d7412510
	VMINVV		V1, V2, V3			// d7812016
	VMINVV		V1, V2, V0, V3			// d7812014
	VMINVX		X10, V2, V3			// d7412516
	VMINVX		X10, V2, V0, V3			// d7412514
	VMAXUVV		V1, V2, V3			// d781201a
	VMAXUVV		V1, V2, V0, V3			// d7812018
	VMAXUVX		X10, V2, V3			// d741251a
	VMAXUVX		X10, V2, V0, V3			// d7412518
	VMAXVV		V1, V2, V3			// d781201e
	VMAXVV		V1, V2, V0, V3			// d781201c
	VMAXVX		X10, V2, V3			// d741251e
	VMAXVX		X10, V2, V0, V3			// d741251c

	// 31.11.10: Vector Single-Width Integer Multiply Instructions
	VMULVV		V1, V2, V3			// d7a12096
	VMULVV		V1, V2, V0, V3			// d7a12094
	VMULVX		X10, V2, V3			// d7612596
	VMULVX		X10, V2, V0, V3			// d7612594
	VMULHVV		V1, V2, V3			// d7a1209e
	VMULHVV		V1, V2, V0, V3			// d7a1209c
	VMULHVX		X10, V2, V3			// d761259e
	VMULHVX		X10, V2, V0, V3			// d761259c
	VMULHUVV	V1, V2, V3			// d7a12092
	VMULHUVV	V1, V2, V0, V3			// d7a12090
	VMULHUVX	X10, V2, V3			// d7612592
	VMULHUVX	X10, V2, V0, V3			// d7612590
	VMULHSUVV	V1, V2, V3			// d7a1209a
	VMULHSUVV	V1, V2, V0, V3			// d7a12098
	VMULHSUVX	X10, V2, V3			// d761259a
	VMULHSUVX	X10, V2, V0, V3			// d7612598

	// 31.11.11: Vector Integer Divide Instructions
	VDIVUVV		V1, V2, V3			// d7a12082
	VDIVUVV		V1, V2, V0, V3			// d7a12080
	VDIVUVX		X10, V2, V3			// d7612582
	VDIVUVX		X10, V2, V0, V3			// d7612580
	VDIVVV		V1, V2, V3			// d7a12086
	VDIVVV		V1, V2, V0, V3			// d7a12084
	VDIVVX		X10, V2, V3			// d7612586
	VDIVVX		X10, V2, V0, V3			// d7612584
	VREMUVV		V1, V2, V3			// d7a1208a
	VREMUVV		V1, V2, V0, V3			// d7a12088
	VREMUVX		X10, V2, V3			// d761258a
	VREMUVX		X10, V2, V0, V3			// d7612588
	VREMVV		V1, V2, V3			// d7a1208e
	VREMVV		V1, V2, V0, V3			// d7a1208c
	VREMVX		X10, V2, V3			// d761258e
	VREMVX		X10, V2, V0, V3			// d761258c

	// 31.11.12: Vector Widening Integer Multiply Instructions
	VWMULVV		V1, V2, V3			// d7a120ee
	VWMULVV		V1, V2, V0, V3			// d7a120ec
	VWMULVX		X10, V2, V3			// d76125ee
	VWMULVX		X10, V2, V0, V3			// d76125ec
	VWMULUVV	V1, V2, V3			// d7a120e2
	VWMULUVV	V1, V2, V0, V3			// d7a120e0
	VWMULUVX	X10, V2, V3			// d76125e2
	VWMULUVX	X10, V2, V0, V3			// d76125e0
	VWMULSUVV	V1, V2, V3			// d7a120ea
	VWMULSUVV	V1, V2, V0, V3			// d7a120e8
	VWMULSUVX	X10, V2, V3			// d76125ea
	VWMULSUVX	X10, V2, V0, V3			// d76125e8

	// 31.11.13: Vector Single-Width Integer Multiply-Add Instructions
	VMACCVV		V1, V2, V3			// d7a120b6
	VMACCVV		V1, V2, V0, V3			// d7a120b4
	VMACCVX		X10, V2, V3			// d76125b6
	VMACCVX		X10, V2, V0, V3			// d76125b4
	VNMSACVV	V1, V2, V3			// d7a120be
	VNMSACVV	V1, V2, V0, V3			// d7a120bc
	VNMSACVX	X10, V2, V3			// d76125be
	VNMSACVX	X10, V2, V0, V3			// d76125bc
	VMADDVV		V1, V2, V3			// d7a120a6
	VMADDVV		V1, V2, V0, V3			// d7a120a4
	VMADDVX		X10, V2, V3			// d76125a6
	VMADDVX		X10, V2, V0, V3			// d76125a4
	VNMSUBVV	V1, V2, V3			// d7a120ae
	VNMSUBVV	V1, V2, V0, V3			// d7a120ac
	VNMSUBVX	X10, V2, V3			// d76125ae
	VNMSUBVX	X10, V2, V0, V3			// d76125ac

	// 31.11.14: Vector Widening Integer Multiply-Add Instructions
	VWMACCUVV	V1, V2, V3			// d7a120f2
	VWMACCUVV	V1, V2, V0, V3			// d7a120f0
	VWMACCUVX	X10, V2, V3			// d76125f2
	VWMACCUVX	X10, V2, V0, V3			// d76125f0
	VWMACCVV	V1, V2, V3			// d7a120f6
	VWMACCVV	V1, V2, V0, V3			// d7a120f4
	VWMACCVX	X10, V2, V3			// d76125f6
	VWMACCVX	X10, V2, V0, V3			// d76125f4
	VWMACCSUVV	V1, V2, V3			// d7a120fe
	VWMACCSUVV	V1, V2, V0, V3			// d7a120fc
	VWMACCSUVX	X10, V2, V3			// d76125fe
	VWMACCSUVX	X10, V2, V0, V3			// d76125fc
	VWMACCUSVX	X10, V2, V3			// d76125fa
	VWMACCUSVX	X10, V2, V0, V3			// d76125f8

	// 31.11.15: Vector Integer Merge Instructions
	VMERGEVVM	V1, V2, V0, V3			// d781205c
	VMERGEVXM	X10, V2, V0, V3			// d741255c
	VMERGEVIM	$15, V2, V0, V3			// d7b1275c

	// 31.11.16: Vector Integer Move Instructions
	VMVVV		V2, V3				// d701015e
	VMVVX		X10, V3				// d741055e
	VMVVI		$15, V3				// d7b1075e

	// 31.12.1: Vector Single-Width Saturating Add and Subtract
	VSADDUVV	V1, V2, V3			// d7812082
	VSADDUVV	V1, V2, V0, V3			// d7812080
	VSADDUVX	X10, V2, V3			// d7412582
	VSADDUVX	X10, V2, V0, V3			// d7412580
	VSADDUVI	$15, V2, V3			// d7b12782
	VSADDUVI	$15, V2, V0, V3			// d7b12780
	VSADDVV		V1, V2, V3			// d7812086
	VSADDVV		V1, V2, V0, V3			// d7812084
	VSADDVX		X10, V2, V3			// d7412586
	VSADDVX		X10, V2, V0, V3			// d7412584
	VSADDVI		$15, V2, V3			// d7b12786
	VSADDVI		$15, V2, V0, V3			// d7b12784
	VSSUBUVV	V1, V2, V3			// d781208a
	VSSUBUVV	V1, V2, V0, V3			// d7812088
	VSSUBUVX	X10, V2, V3			// d741258a
	VSSUBUVX	X10, V2, V0, V3			// d7412588
	VSSUBVV		V1, V2, V3			// d781208e
	VSSUBVV		V1, V2, V0, V3			// d781208c
	VSSUBVX		X10, V2, V3			// d741258e
	VSSUBVX		X10, V2, V0, V3			// d741258c

	// 31.12.2: Vector Single-Width Averaging Add and Subtract
	VAADDUVV	V1, V2, V3			// d7a12022
	VAADDUVV	V1, V2, V0, V3			// d7a12020
	VAADDUVX	X10, V2, V3			// d7612522
	VAADDUVX	X10, V2, V0, V3			// d7612520
	VAADDVV		V1, V2, V3			// d7a12026
	VAADDVV		V1, V2, V0, V3			// d7a12024
	VAADDVX		X10, V2, V3			// d7612526
	VAADDVX		X10, V2, V0, V3			// d7612524
	VASUBUVV	V1, V2, V3			// d7a1202a
	VASUBUVV	V1, V2, V0, V3			// d7a12028
	VASUBUVX	X10, V2, V3			// d761252a
	VASUBUVX	X10, V2, V0, V3			// d7612528
	VASUBVV		V1, V2, V3			// d7a1202e
	VASUBVV		V1, V2, V0, V3			// d7a1202c
	VASUBVX		X10, V2, V3			// d761252e
	VASUBVX		X10, V2, V0, V3			// d761252c

	// 31.12.3: Vector Single-Width Fractional Multiply with Rounding and Saturation
	VSMULVV		V1, V2, V3			// d781209e
	VSMULVV		V1, V2, V0, V3			// d781209c
	VSMULVX		X10, V2, V3			// d741259e
	VSMULVX		X10, V2, V0, V3			// d741259c

	// 31.12.4: Vector Single-Width Scaling Shift Instructions
	VSSRLVV		V1, V2, V3			// d78120aa
	VSSRLVV		V1, V2, V0, V3			// d78120a8
	VSSRLVX		X10, V2, V3			// d74125aa
	VSSRLVX		X10, V2, V0, V3			// d74125a8
	VSSRLVI		$15, V2, V3			// d7b127aa
	VSSRLVI		$15, V2, V0, V3			// d7b127a8
	VSSRAVV		V1, V2, V3			// d78120ae
	VSSRAVV		V1, V2, V0, V3			// d78120ac
	VSSRAVX		X10, V2, V3			// d74125ae
	VSSRAVX		X10, V2, V0, V3			// d74125ac
	VSSRAVI		$16, V2, V3			// d73128ae
	VSSRAVI		$16, V2, V0, V3			// d73128ac

	// 31.12.5: Vector Narrowing Fixed-Point Clip Instructions
	VNCLIPUWV	V1, V2, V3			// d78120ba
	VNCLIPUWV	V1, V2, V0, V3			// d78120b8
	VNCLIPUWX	X10, V2, V3			// d74125ba
	VNCLIPUWX	X10, V2, V0, V3			// d74125b8
	VNCLIPUWI	$16, V2, V3			// d73128ba
	VNCLIPUWI	$16, V2, V0, V3			// d73128b8
	VNCLIPWV	V1, V2, V3			// d78120be
	VNCLIPWV	V1, V2, V0, V3			// d78120bc
	VNCLIPWX	X10, V2, V3			// d74125be
	VNCLIPWX	X10, V2, V0, V3			// d74125bc
	VNCLIPWI	$16, V2, V3			// d73128be
	VNCLIPWI	$16, V2, V0, V3			// d73128bc

	//
	// Privileged ISA
	//

	// 3.3.1: Environment Call and Breakpoint
	ECALL						// 73000000
	SCALL						// 73000000
	EBREAK						// 73001000
	SBREAK						// 73001000

	// Arbitrary bytes (entered in little-endian mode)
	WORD	$0x12345678	// WORD $305419896	// 78563412
	WORD	$0x9abcdef0	// WORD $2596069104	// f0debc9a

	// MOV pseudo-instructions
	MOV	X5, X6								// 13830200
	MOV	$2047, X5							// 9302f07f
	MOV	$-2048, X5							// 93020080
	MOV	$2048, X5							// b71200009b820280
	MOV	$-2049, X5							// b7f2ffff9b82f27f
	MOV	$4096, X5							// b7120000
	MOV	$0x7ffff000, X5		// MOV	$2147479552, X5			// b7f2ff7f
	MOV	$-0x7ffff000, X5	// MOV	$-2147479552, X5		// b7120080
	MOV	$0x7fffffff, X5		// MOV	$2147483647, X5			// b70200809b82f2ff
	MOV	$-0x7fffffff, X5	// MOV	$-2147483647, X5		// b70200809b821200

	// Converted to load and shift(s)
	MOV	$0xffffffff, X5		// MOV	$4294967295, X5			// 9302f0ff93d20202
	MOV	$0x100000000, X5	// MOV	$4294967296, X5			// 9302100093920202
	MOV	$0xfffffffffffda, X5	// MOV	$4503599627370458, X5		// 9302d0fe9392d20093d2c200
	MOV	$0xffffffffffffe, X5	// MOV	$4503599627370494, X5		// 9302f0ff9392d20093d2c200
	MOV	$0x7fffffff00000000, X5	// MOV	$9223372032559808512, X5	// b70200809b82f2ff93920202
	MOV	$0x8000000100000000, X5	// MOV	$-9223372032559808512, X5	// b70200809b82120093920202
	MOV	$0xffffffff00000000, X5	// MOV	$-4294967296, X5		// 9302f0ff93920202
	MOV	$0x1ffffffff0000000, X5	// MOV	$2305843008945258496, X5	// 9302f0ff9392f20193d23200
	MOV	$0x7fffffffffffffff, X5 // MOV	$9223372036854775807, X5	// 9302f0ff93d21200

	// Converted to load of symbol (AUIPC + LD)
	MOV	$0x80000001, X5		// MOV	$2147483649, X5			// 9702000083b20200
	MOV	$0x100000001, X5	// MOV	$4294967297, X5			// 9702000083b20200
	MOV	$0x0800000010000000, X5	// MOV	$576460752571858944, X5		// 9702000083b20200
	MOV	$0x8000000010000000, X5	// MOV	$-9223372036586340352, X5	// 9702000083b20200
	MOV	$0x0abcdabcd0000000, X5	// MOV	$773733740479250432, X5		// 9702000083b20200
	MOV	$0x8abcdabcd0000000, X5	// MOV	$-8449638296375525376, X5	// 9702000083b20200
	MOV	$0xfff0000000ffffff, X5 // MOV	$-4503599610593281, X5		// 9702000083b20200

	MOV	(X5), X6				// 03b30200
	MOV	4(X5), X6				// 03b34200
	MOVB	(X5), X6				// 03830200
	MOVB	4(X5), X6				// 03834200
	MOVH	(X5), X6				// 03930200
	MOVH	4(X5), X6				// 03934200
	MOVW	(X5), X6				// 03a30200
	MOVW	4(X5), X6				// 03a34200
	MOV	X5, (X6)				// 23305300
	MOV	X5, 4(X6)				// 23325300
	MOVB	X5, (X6)				// 23005300
	MOVB	X5, 4(X6)				// 23025300
	MOVH	X5, (X6)				// 23105300
	MOVH	X5, 4(X6)				// 23125300
	MOVW	X5, (X6)				// 23205300
	MOVW	X5, 4(X6)				// 23225300

	MOVB	X5, X6					// 1393820313538343 or 13934260
	MOVH	X5, X6					// 1393020313530343 or 13935260
	MOVW	X5, X6					// 1b830200
	MOVBU	X5, X6					// 13f3f20f
	MOVHU	X5, X6					// 1393020313530303 or 3bc30208
	MOVWU	X5, X6					// 1393020213530302 or 3b830208

	MOVF	4(X5), F0				// 07a04200
	MOVF	F0, 4(X5)				// 27a20200
	MOVF	F0, F1					// d3000020

	MOVD	4(X5), F0				// 07b04200
	MOVD	F0, 4(X5)				// 27b20200
	MOVD	F0, F1					// d3000022

	// Convert to load of symbol (AUIPC + FLD)
	MOVD	$(709.78271289338397), F3		// 970f000087b10f00

	// TLS load with local-exec (LUI + ADDIW + ADD of TP + load)
	MOV	tls(SB), X5				// b70f00009b8f0f00b38f4f0083b20f00
	MOVB	tls(SB), X5				// b70f00009b8f0f00b38f4f0083820f00

	// TLS store with local-exec (LUI + ADDIW + ADD of TP + store)
	MOV	X5, tls(SB)				// b70f00009b8f0f00b38f4f0023b05f00
	MOVB	X5, tls(SB)				// b70f00009b8f0f00b38f4f0023805f00

	// NOT pseudo-instruction
	NOT	X5					// 93c2f2ff
	NOT	X5, X6					// 13c3f2ff

	// NEG/NEGW pseudo-instructions
	NEG	X5					// b3025040
	NEG	X5, X6					// 33035040
	NEGW	X5					// bb025040
	NEGW	X5, X6					// 3b035040

	// This jumps to the second instruction in the function (the
	// first instruction is an invisible stack pointer adjustment).
	JMP	start					// JMP	2

	JMP	2(PC)					// 6f008000
	JMP	(X5)					// 67800200
	JMP	4(X5)					// 67804200

	// CALL and JMP to symbol are encoded as JAL (using LR or ZERO
	// respectively), with a R_RISCV_JAL relocation. The linker resolves
	// the real address and updates the immediate, using a trampoline in
	// the case where the address is not directly reachable.
	CALL	asmtest(SB)				// ef000000
	JMP	asmtest(SB)				// 6f000000

	// Branch pseudo-instructions
	BEQZ	X5, 2(PC)				// 63840200
	BGEZ	X5, 2(PC)				// 63d40200
	BGT	X5, X6, 2(PC)				// 63445300
	BGTU	X5, X6, 2(PC)				// 63645300
	BGTZ	X5, 2(PC)				// 63445000
	BLE	X5, X6, 2(PC)				// 63545300
	BLEU	X5, X6, 2(PC)				// 63745300
	BLEZ	X5, 2(PC)				// 63545000
	BLTZ	X5, 2(PC)				// 63c40200
	BNEZ	X5, 2(PC)				// 63940200

	// Set pseudo-instructions
	SEQZ	X15, X15				// 93b71700
	SNEZ	X15, X15				// b337f000

	// F extension
	FABSS	F0, F1					// d3200020
	FNEGS	F0, F1					// d3100020
	FNES	F0, F1, X7				// d3a300a093c31300

	// D extension
	FABSD	F0, F1					// d3200022
	FNEGD	F0, F1					// d3100022
	FNED	F0, F1, X5				// d3a200a293c21200
	FLTD	F0, F1, X5				// d39200a2
	FLED	F0, F1, X5				// d38200a2
	FEQD	F0, F1, X5				// d3a200a2

GLOBL tls(SB), TLSBSS, $8
